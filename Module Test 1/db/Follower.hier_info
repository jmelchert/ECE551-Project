|follower
clk => clk.IN3
RST_n => rst_n.ACLR
RST_n => rst_ff_n.ACLR
led[0] << motor_cntrl:iMTR.rev_rht
led[1] << motor_cntrl:iMTR.fwd_rht
led[2] << motor_cntrl:iMTR.rev_lft
led[3] << motor_cntrl:iMTR.fwd_lft
led[4] << <GND>
led[5] << <GND>
led[6] << <GND>
led[7] << <GND>
a2d_SS_n << <GND>
SCLK << <GND>
MISO => ~NO_FANOUT~
MOSI << <GND>
rev_rht << motor_cntrl:iMTR.rev_rht
rev_lft << motor_cntrl:iMTR.rev_lft
fwd_rht << motor_cntrl:iMTR.fwd_rht
fwd_lft << motor_cntrl:iMTR.fwd_lft
IR_in_en << <GND>
IR_mid_en << <GND>
IR_out_en << <GND>
in_transit << <GND>
OK2Move => ~NO_FANOUT~
buzz << <GND>
buzz_n << <GND>
BC => ~NO_FANOUT~
TX << uart_tx:iUART_tx.tx
RX => RX.IN1


|follower|uart_rcv:iCMD
clk => state.CLK
clk => rx_rdy~reg0.CLK
clk => bit_count[0].CLK
clk => bit_count[1].CLK
clk => bit_count[2].CLK
clk => bit_count[3].CLK
clk => baud_count[0].CLK
clk => baud_count[1].CLK
clk => baud_count[2].CLK
clk => baud_count[3].CLK
clk => baud_count[4].CLK
clk => baud_count[5].CLK
clk => baud_count[6].CLK
clk => baud_count[7].CLK
clk => baud_count[8].CLK
clk => baud_count[9].CLK
clk => baud_count[10].CLK
clk => baud_count[11].CLK
clk => rx_data[0]~reg0.CLK
clk => rx_data[1]~reg0.CLK
clk => rx_data[2]~reg0.CLK
clk => rx_data[3]~reg0.CLK
clk => rx_data[4]~reg0.CLK
clk => rx_data[5]~reg0.CLK
clk => rx_data[6]~reg0.CLK
clk => rx_data[7]~reg0.CLK
clk => shift_reg[1].CLK
clk => shift_reg[2].CLK
clk => shift_reg[3].CLK
clk => shift_reg[4].CLK
clk => shift_reg[5].CLK
clk => shift_reg[6].CLK
clk => shift_reg[7].CLK
clk => shift_reg[8].CLK
clk => shift_reg[9].CLK
clk => RX_sync_1.CLK
clk => RX_sync_0.CLK
rst_n => rx_data[0]~reg0.ACLR
rst_n => rx_data[1]~reg0.ACLR
rst_n => rx_data[2]~reg0.ACLR
rst_n => rx_data[3]~reg0.ACLR
rst_n => rx_data[4]~reg0.ACLR
rst_n => rx_data[5]~reg0.ACLR
rst_n => rx_data[6]~reg0.ACLR
rst_n => rx_data[7]~reg0.ACLR
rst_n => shift_reg[1].ACLR
rst_n => shift_reg[2].ACLR
rst_n => shift_reg[3].ACLR
rst_n => shift_reg[4].ACLR
rst_n => shift_reg[5].ACLR
rst_n => shift_reg[6].ACLR
rst_n => shift_reg[7].ACLR
rst_n => shift_reg[8].ACLR
rst_n => shift_reg[9].ACLR
rst_n => rx_rdy~reg0.ACLR
rst_n => baud_count[0].ACLR
rst_n => baud_count[1].ACLR
rst_n => baud_count[2].ACLR
rst_n => baud_count[3].ACLR
rst_n => baud_count[4].ACLR
rst_n => baud_count[5].ACLR
rst_n => baud_count[6].ACLR
rst_n => baud_count[7].ACLR
rst_n => baud_count[8].ACLR
rst_n => baud_count[9].ACLR
rst_n => baud_count[10].ACLR
rst_n => baud_count[11].ACLR
rst_n => bit_count[0].ACLR
rst_n => bit_count[1].ACLR
rst_n => bit_count[2].ACLR
rst_n => bit_count[3].ACLR
rst_n => state.ACLR
RX => RX_sync_0.DATAIN
rx_data[0] <= rx_data[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[1] <= rx_data[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[2] <= rx_data[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[3] <= rx_data[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[4] <= rx_data[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[5] <= rx_data[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[6] <= rx_data[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[7] <= rx_data[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_rdy <= rx_rdy~reg0.DB_MAX_OUTPUT_PORT_TYPE
clr_rx_rdy => rx_rdy.OUTPUTSELECT


|follower|uart_tx:iUART_tx
clk => tx_done~reg0.CLK
clk => shift_reg[0].CLK
clk => shift_reg[1].CLK
clk => shift_reg[2].CLK
clk => shift_reg[3].CLK
clk => shift_reg[4].CLK
clk => shift_reg[5].CLK
clk => shift_reg[6].CLK
clk => shift_reg[7].CLK
clk => shift_reg[8].CLK
clk => baud_cnt[0].CLK
clk => baud_cnt[1].CLK
clk => baud_cnt[2].CLK
clk => baud_cnt[3].CLK
clk => baud_cnt[4].CLK
clk => baud_cnt[5].CLK
clk => baud_cnt[6].CLK
clk => baud_cnt[7].CLK
clk => baud_cnt[8].CLK
clk => baud_cnt[9].CLK
clk => baud_cnt[10].CLK
clk => baud_cnt[11].CLK
clk => bit_cnt[0].CLK
clk => bit_cnt[1].CLK
clk => bit_cnt[2].CLK
clk => bit_cnt[3].CLK
clk => state.CLK
rst_n => shift_reg[0].PRESET
rst_n => shift_reg[1].PRESET
rst_n => shift_reg[2].PRESET
rst_n => shift_reg[3].PRESET
rst_n => shift_reg[4].PRESET
rst_n => shift_reg[5].PRESET
rst_n => shift_reg[6].PRESET
rst_n => shift_reg[7].PRESET
rst_n => shift_reg[8].PRESET
rst_n => tx_done~reg0.ACLR
rst_n => state.ACLR
rst_n => bit_cnt[0].ACLR
rst_n => bit_cnt[1].ACLR
rst_n => bit_cnt[2].ACLR
rst_n => bit_cnt[3].ACLR
rst_n => baud_cnt[0].PRESET
rst_n => baud_cnt[1].PRESET
rst_n => baud_cnt[2].ACLR
rst_n => baud_cnt[3].ACLR
rst_n => baud_cnt[4].PRESET
rst_n => baud_cnt[5].ACLR
rst_n => baud_cnt[6].PRESET
rst_n => baud_cnt[7].PRESET
rst_n => baud_cnt[8].PRESET
rst_n => baud_cnt[9].ACLR
rst_n => baud_cnt[10].PRESET
rst_n => baud_cnt[11].ACLR
tx <= shift_reg[0].DB_MAX_OUTPUT_PORT_TYPE
strt_tx => tx_done.OUTPUTSELECT
strt_tx => nxt_state.DATAA
strt_tx => load.DATAA
tx_data[0] => shift_reg.DATAB
tx_data[1] => shift_reg.DATAB
tx_data[2] => shift_reg.DATAB
tx_data[3] => shift_reg.DATAB
tx_data[4] => shift_reg.DATAB
tx_data[5] => shift_reg.DATAB
tx_data[6] => shift_reg.DATAB
tx_data[7] => shift_reg.DATAB
tx_done <= tx_done~reg0.DB_MAX_OUTPUT_PORT_TYPE


|follower|motor_cntrl:iMTR
lft[0] => mag_lft.DATAA
lft[0] => Equal0.IN9
lft[0] => mag_lft.DATAB
lft[0] => Add0.IN20
lft[0] => Equal2.IN31
lft[1] => mag_lft.DATAA
lft[1] => Equal0.IN8
lft[1] => mag_lft.DATAB
lft[1] => Add0.IN19
lft[1] => Equal2.IN30
lft[2] => mag_lft.DATAA
lft[2] => Equal0.IN7
lft[2] => mag_lft.DATAB
lft[2] => Add0.IN18
lft[2] => Equal2.IN29
lft[3] => mag_lft.DATAA
lft[3] => Equal0.IN6
lft[3] => mag_lft.DATAB
lft[3] => Add0.IN17
lft[3] => Equal2.IN28
lft[4] => mag_lft.DATAA
lft[4] => Equal0.IN5
lft[4] => mag_lft.DATAB
lft[4] => Add0.IN16
lft[4] => Equal2.IN27
lft[5] => mag_lft.DATAA
lft[5] => Equal0.IN4
lft[5] => mag_lft.DATAB
lft[5] => Add0.IN15
lft[5] => Equal2.IN26
lft[6] => mag_lft.DATAA
lft[6] => Equal0.IN3
lft[6] => mag_lft.DATAB
lft[6] => Add0.IN14
lft[6] => Equal2.IN25
lft[7] => mag_lft.DATAA
lft[7] => Equal0.IN2
lft[7] => mag_lft.DATAB
lft[7] => Add0.IN13
lft[7] => Equal2.IN24
lft[8] => mag_lft.DATAA
lft[8] => Equal0.IN1
lft[8] => mag_lft.DATAB
lft[8] => Add0.IN12
lft[8] => Equal2.IN23
lft[9] => mag_lft.DATAA
lft[9] => Equal0.IN0
lft[9] => mag_lft.DATAB
lft[9] => Add0.IN11
lft[9] => Equal2.IN22
lft[10] => mag_lft.OUTPUTSELECT
lft[10] => mag_lft.OUTPUTSELECT
lft[10] => mag_lft.OUTPUTSELECT
lft[10] => mag_lft.OUTPUTSELECT
lft[10] => mag_lft.OUTPUTSELECT
lft[10] => mag_lft.OUTPUTSELECT
lft[10] => mag_lft.OUTPUTSELECT
lft[10] => mag_lft.OUTPUTSELECT
lft[10] => mag_lft.OUTPUTSELECT
lft[10] => mag_lft.OUTPUTSELECT
lft[10] => rev_lft.OUTPUTSELECT
lft[10] => fwd_lft.OUTPUTSELECT
lft[10] => Equal2.IN21
rht[0] => mag_rht.DATAA
rht[0] => Equal1.IN9
rht[0] => mag_rht.DATAB
rht[0] => Add1.IN20
rht[0] => Equal3.IN31
rht[1] => mag_rht.DATAA
rht[1] => Equal1.IN8
rht[1] => mag_rht.DATAB
rht[1] => Add1.IN19
rht[1] => Equal3.IN30
rht[2] => mag_rht.DATAA
rht[2] => Equal1.IN7
rht[2] => mag_rht.DATAB
rht[2] => Add1.IN18
rht[2] => Equal3.IN29
rht[3] => mag_rht.DATAA
rht[3] => Equal1.IN6
rht[3] => mag_rht.DATAB
rht[3] => Add1.IN17
rht[3] => Equal3.IN28
rht[4] => mag_rht.DATAA
rht[4] => Equal1.IN5
rht[4] => mag_rht.DATAB
rht[4] => Add1.IN16
rht[4] => Equal3.IN27
rht[5] => mag_rht.DATAA
rht[5] => Equal1.IN4
rht[5] => mag_rht.DATAB
rht[5] => Add1.IN15
rht[5] => Equal3.IN26
rht[6] => mag_rht.DATAA
rht[6] => Equal1.IN3
rht[6] => mag_rht.DATAB
rht[6] => Add1.IN14
rht[6] => Equal3.IN25
rht[7] => mag_rht.DATAA
rht[7] => Equal1.IN2
rht[7] => mag_rht.DATAB
rht[7] => Add1.IN13
rht[7] => Equal3.IN24
rht[8] => mag_rht.DATAA
rht[8] => Equal1.IN1
rht[8] => mag_rht.DATAB
rht[8] => Add1.IN12
rht[8] => Equal3.IN23
rht[9] => mag_rht.DATAA
rht[9] => Equal1.IN0
rht[9] => mag_rht.DATAB
rht[9] => Add1.IN11
rht[9] => Equal3.IN22
rht[10] => mag_rht.OUTPUTSELECT
rht[10] => mag_rht.OUTPUTSELECT
rht[10] => mag_rht.OUTPUTSELECT
rht[10] => mag_rht.OUTPUTSELECT
rht[10] => mag_rht.OUTPUTSELECT
rht[10] => mag_rht.OUTPUTSELECT
rht[10] => mag_rht.OUTPUTSELECT
rht[10] => mag_rht.OUTPUTSELECT
rht[10] => mag_rht.OUTPUTSELECT
rht[10] => mag_rht.OUTPUTSELECT
rht[10] => rev_rht.OUTPUTSELECT
rht[10] => fwd_rht.OUTPUTSELECT
rht[10] => Equal3.IN21
clk => clk.IN2
rst_n => rst_n.IN2
fwd_lft <= fwd_lft.DB_MAX_OUTPUT_PORT_TYPE
rev_lft <= rev_lft.DB_MAX_OUTPUT_PORT_TYPE
fwd_rht <= fwd_rht.DB_MAX_OUTPUT_PORT_TYPE
rev_rht <= rev_rht.DB_MAX_OUTPUT_PORT_TYPE


|follower|motor_cntrl:iMTR|pwm:PWM_lft
duty[0] => Equal0.IN9
duty[1] => Equal0.IN8
duty[2] => Equal0.IN7
duty[3] => Equal0.IN6
duty[4] => Equal0.IN5
duty[5] => Equal0.IN4
duty[6] => Equal0.IN3
duty[7] => Equal0.IN2
duty[8] => Equal0.IN1
duty[9] => Equal0.IN0
clk => cnt[0].CLK
clk => cnt[1].CLK
clk => cnt[2].CLK
clk => cnt[3].CLK
clk => cnt[4].CLK
clk => cnt[5].CLK
clk => cnt[6].CLK
clk => cnt[7].CLK
clk => cnt[8].CLK
clk => cnt[9].CLK
clk => PWM_sig~reg0.CLK
rst_n => cnt[0].ACLR
rst_n => cnt[1].ACLR
rst_n => cnt[2].ACLR
rst_n => cnt[3].ACLR
rst_n => cnt[4].ACLR
rst_n => cnt[5].ACLR
rst_n => cnt[6].ACLR
rst_n => cnt[7].ACLR
rst_n => cnt[8].ACLR
rst_n => cnt[9].ACLR
rst_n => PWM_sig~reg0.ACLR
PWM_sig <= PWM_sig~reg0.DB_MAX_OUTPUT_PORT_TYPE


|follower|motor_cntrl:iMTR|pwm:PWM_rht
duty[0] => Equal0.IN9
duty[1] => Equal0.IN8
duty[2] => Equal0.IN7
duty[3] => Equal0.IN6
duty[4] => Equal0.IN5
duty[5] => Equal0.IN4
duty[6] => Equal0.IN3
duty[7] => Equal0.IN2
duty[8] => Equal0.IN1
duty[9] => Equal0.IN0
clk => cnt[0].CLK
clk => cnt[1].CLK
clk => cnt[2].CLK
clk => cnt[3].CLK
clk => cnt[4].CLK
clk => cnt[5].CLK
clk => cnt[6].CLK
clk => cnt[7].CLK
clk => cnt[8].CLK
clk => cnt[9].CLK
clk => PWM_sig~reg0.CLK
rst_n => cnt[0].ACLR
rst_n => cnt[1].ACLR
rst_n => cnt[2].ACLR
rst_n => cnt[3].ACLR
rst_n => cnt[4].ACLR
rst_n => cnt[5].ACLR
rst_n => cnt[6].ACLR
rst_n => cnt[7].ACLR
rst_n => cnt[8].ACLR
rst_n => cnt[9].ACLR
rst_n => PWM_sig~reg0.ACLR
PWM_sig <= PWM_sig~reg0.DB_MAX_OUTPUT_PORT_TYPE


